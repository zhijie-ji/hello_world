
pipeline {
//None parameter in the agent section means that no global agent will be allocated for the entire Pipeline’s
//execution and that each stage directive must specify its own agent section.
    agent any
    //agent { docker { image 'tiangolo/uwsgi-nginx-flask' } }
    stages {
//        stage('Build') {
//            
////            agent {
////                docker {
////                    //This image parameter (of the agent section’s docker parameter) downloads the python:2-alpine
////                    //Docker image and runs this image as a separate container. The Python container becomes
////                    //the agent that Jenkins uses to run the Build stage of your Pipeline project.
////                    image 'python:2-alpine'
////                }
////            }
//            steps {

//                withEnv(["HOME=${env.WORKSPACE}"]) {
//                    sh 'pip install --user flask'
//                    sh 'pip install --user gunicorn'
//                }
//            }
//        }

//        stage('Test') {
//            agent {
//                docker {
//                    //This image parameter downloads the qnib:pytest Docker image and runs this image as a
//                    //separate container. The pytest container becomes the agent that Jenkins uses to run the Test
//                    //stage of your Pipeline project.
//                    image 'qnib/pytest'
//                }
//            }
//            steps {
//                //This sh step executes pytest’s py.test command on sources/test_calc.py, which runs a set of
//                //unit tests (defined in test_calc.py) on the "calc" library’s add2 function.
//                //The --junit-xml test-reports/results.xml option makes py.test generate a JUnit XML report,
//                //which is saved to test-reports/results.xml
////                sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
//                echo "test begin"
//                
//                withEnv(["HOME=${env.WORKSPACE}"]) {
//                sh 'python test.py'
//                }
//            }
//            
//            post {
//                always {
//                    //This junit step archives the JUnit XML report (generated by the py.test command above) and
//                    //exposes the results through the Jenkins interface.
//                    //The post section’s always condition that contains this junit step ensures that the step is
//                    //always executed at the completion of the Test stage, regardless of the stage’s outcome.
//                    //junit 'test-reports/results.xml'
//                    always {junit 'test-reports/*.xml'}
//                    echo "test finsih"
//                }
//            }
//        }
        stage('Deliver') {
                    //This environment block defines two variables which will be used later in the 'Deliver' stage.
//                    environment {
//                        VOLUME = '$(pwd)/sources:/src'
//                        IMAGE = 'cdrx/pyinstaller-linux:python2'
//                    }
                    steps {

                            //withEnv(["HOME=${env.WORKSPACE}"]) {
                                //sh 'gunicorn -b 0.0.0.0:8000 app:hello'
                            sh 'sudo bash start.sh'
                            //}
                        }
                    }
//                    post {
//                        success {
//                            //This archiveArtifacts step archives the standalone executable file and exposes this file
//                            //through the Jenkins interface.
//                            archiveArtifacts "${env.BUILD_ID}/sources/dist/add2vals"
//                            sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"
//                        }
//                    }

    }
}

